load("@arm_none_eabi//toolchain:toolchain.bzl", "arm_none_eabi_toolchain")
load("@rules_cc//cc:defs.bzl", "cc_library")
load("//board:defs.bzl", "BOARDS")

cc_library(
    name = "start_cortex-m3",
    srcs = ["startup_cortex-m3.cpp"],
    additional_linker_inputs = [
        "cortex-m3.ld",
    ],
    copts = [
        "-ffreestanding",
    ],
    linkopts = [
        "-T $(location :cortex-m3.ld)",
        "-nostartfiles",
    ] + select({
        "//config:semihosting_disabled": [],
        "//config:semihosting_enabled": [
            "-specs=rdimon.specs",
            # never garbage collect 'initialise_monitor_handles' when using
            # semihosting
            "-Wl,--require-defined=initialise_monitor_handles",
        ],
    }),
    tags = ["manual"],
    alwayslink = True,
)

_warning_opts = [
    "-Werror",
    "-Wall",
    "-Wextra",
    "-Wpedantic",
    "-Wconversion",
    "-Wnon-virtual-dtor",
    "-Wold-style-cast",
    "-Wcast-align",
    "-Wunused",
    "-Woverloaded-virtual",
    "-Wmisleading-indentation",
    "-Wnull-dereference",
    "-Wdouble-promotion",
    "-Wformat=2",
    "-Wimplicit-fallthrough",
    "-Wextra-semi",
    "-Wunreachable-code",
]

[
    arm_none_eabi_toolchain(
        name = "{board}_toolchain".format(board = board.name),
        additional_link_libraries = [
            "//board/{board}:memory_region".format(board = board.name),
            ":start_{cpu}".format(cpu = board.cpu),
        ],
        copts = common_opts + [
            "-fdiagnostics-color",
            "-fno-use-cxa-atexit",
        ],
        cxxopts = _warning_opts + [
            "-std=c++20",
            "-ffreestanding",
        ],
        linkopts = common_opts + [
            "-Wl,--gc-sections",
            "-Wl,--fatal-warnings",
        ],
        target_compatible_with = [
            "@platforms//os:none",
            "//cpu:{cpu}".format(cpu = board.cpu),
            "//board:{board}".format(board = board.name),
        ],
        visibility = ["//visibility:public"],
    )
    for board, common_opts in [
        (
            board,
            [
                "-mcpu={cpu}".format(cpu = board.cpu),
                "-mthumb",
                "-mfloat-abi=soft",
                "-fno-exceptions",
                "-specs=nano.specs",
            ],
        )
        for board in BOARDS
    ]
]
