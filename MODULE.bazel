module(name = "cortex_m")

bazel_dep(
    name = "toolchains_arm_gnu",
)
bazel_dep(
    name = "rules_cc",
    version = "0.1.3",
)
bazel_dep(
    name = "bazel_skylib",
    version = "1.7.1",
)
bazel_dep(
    name = "platforms",
    version = "1.0.0",
)
bazel_dep(
    name = "rules_nixpkgs_core",
    version = "0.13.0",
)

TOOLCHAINS_ARM_GNU_COMMIT = "1abff3e6a5f894d0545654800ee0db6ea24a76a3"

archive_override(
    module_name = "toolchains_arm_gnu",
    integrity = "sha256-surv16TjyDtSebSX8fdj85TVnC8wGjIthEk3uHlKvFs=",
    strip_prefix = "toolchains_arm_gnu-{commit}".format(
        commit = TOOLCHAINS_ARM_GNU_COMMIT,
    ),
    urls = [
        "https://github.com/hexdae/toolchains_arm_gnu/archive/{commit}.tar.gz".format(
            commit = TOOLCHAINS_ARM_GNU_COMMIT,
        ),
    ],
)

arm_toolchain = use_extension(
    "@toolchains_arm_gnu//:extensions.bzl",
    "arm_toolchain",
)
arm_toolchain.arm_none_eabi(version = "13.2.1")
use_repo(
    arm_toolchain,
    "arm_none_eabi",
)

register_toolchains(
    "//toolchain:lm3s6965evb_toolchain",
    "//:qemu_test_runner_toolchain",
)

flake_package_deps = use_extension(
    "//extensions:flake_package_deps.bzl",
    "flake_package_deps",
)
use_repo(
    flake_package_deps,
    "gdb",
    "qemu-system-arm",
)

local_config = use_extension(
    "//extensions:local_config.bzl",
    "local_config",
)
use_repo(
    local_config,
    "local_workspace_directories",
)

bazel_dep(
    name = "toolchains_llvm",
    dev_dependency = True,
)
bazel_dep(
    name = "bazel_clang_format",
    version = "0.0.1",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_clang_tidy",
    version = "0.0.0",
    dev_dependency = True,
)
bazel_dep(
    name = "buildifier_prebuilt",
    version = "8.2.0.2",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_multirun",
    version = "0.12.0",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_python",
    dev_dependency = True,
)
bazel_dep(
    name = "rules_shell",
    version = "0.4.1",
    dev_dependency = True,
)
bazel_dep(
    name = "hedron_compile_commands",
    dev_dependency = True,
)

RULES_PYTHON_COMMIT = "4a422b02011c8913a800eb3d2f578ae7afffc497"

archive_override(
    module_name = "rules_python",
    integrity = "sha256-Tq7TGVY3unA20/2FfXIqH+8MuM7Ahi6B6kGwmE7WQGY=",
    strip_prefix = "rules_python-{commit}".format(
        commit = RULES_PYTHON_COMMIT,
    ),
    urls = ["https://github.com/bazel-contrib/rules_python/archive/{commit}.tar.gz".format(
        commit = RULES_PYTHON_COMMIT,
    )],
)

TOOLCHAINS_LLVM_COMMIT = "7cfc09dffd1305bc05916b6b24352583f3d790a9"

archive_override(
    module_name = "toolchains_llvm",
    integrity = "sha256-pxExoYkhpv6w3Lu9PJV4eqRAO9mxv8eI05L3T2lxPvU=",
    strip_prefix = "toolchains_llvm-{commit}".format(
        commit = TOOLCHAINS_LLVM_COMMIT,
    ),
    urls = ["https://github.com/bazel-contrib/toolchains_llvm/archive/{commit}.tar.gz".format(
        commit = TOOLCHAINS_LLVM_COMMIT,
    )],
)

HEDRON_COMPILE_COMMANDS_COMMIT = "4f28899228fb3ad0126897876f147ca15026151e"

archive_override(
    module_name = "hedron_compile_commands",
    integrity = "sha256-ZYEiz7HyW+duohKwD16wR9jirci8+SO5GEYfKx43zfI=",
    strip_prefix = "bazel-compile-commands-extractor-{commit}".format(
        commit = HEDRON_COMPILE_COMMANDS_COMMIT,
    ),
    urls = ["https://github.com/hedronvision/bazel-compile-commands-extractor/archive/{commit}.tar.gz".format(
        commit = HEDRON_COMPILE_COMMANDS_COMMIT,
    )],
)

llvm = use_extension(
    "@toolchains_llvm//toolchain/extensions:llvm.bzl",
    "llvm",
    dev_dependency = True,
)
llvm.toolchain(
    cxx_flags = {
        "": [
            "-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE",
            "-std=c++20",
            "-stdlib=libc++",
            "-Wshadow",
            "-Werror",
            "-Wall",
            "-Wextra",
            "-Wpedantic",
            "-Wconversion",
            "-Wnon-virtual-dtor",
            "-Wold-style-cast",
            "-Wcast-align",
            "-Wunused",
            "-Woverloaded-virtual",
            "-Wmisleading-indentation",
            "-Wnull-dereference",
            "-Wdouble-promotion",
            "-Wformat=2",
            "-Wimplicit-fallthrough",
            "-Wdocumentation-unknown-command",
            "-Wextra-semi",
            "-Wunreachable-code",
            "-Wunreachable-code-return",
        ],
    },
    llvm_version = "20.1.4",
)
use_repo(llvm, "llvm_toolchain")

register_toolchains(
    "@llvm_toolchain//:all",
    dev_dependency = True,
)

python = use_extension(
    "@rules_python//python/extensions:python.bzl",
    "python",
    dev_dependency = True,
)
python.defaults(python_version = "3.11")
python.toolchain(python_version = "3.11")

flake_package_dev_deps = use_extension(
    "//extensions:flake_package_deps.bzl",
    "flake_package_dev_deps",
    dev_dependency = True,
)
use_repo(
    flake_package_dev_deps,
    "nixd",
    "nixfmt",
    "nixfmt-tree",
)
