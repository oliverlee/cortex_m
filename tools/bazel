#!/usr/bin/env bash
set -euo pipefail

# This script is similar in nature to
# https://bytes.zone/posts/nix-script/
#
# Since the shell application in tools/bazel-wrapper/flake.nix only depends on
# Nix packages to provide binaries, this list rarely changes, and does not
# depend on any other files -- we can "cache" the derivation by hashing the
# tools/bazel-wrapper directory.

workspace_root="${BASH_SOURCE[0]%/tools/bazel}"
bazel_wrapper="${workspace_root}/tools/bazel-wrapper"

# this is much faster than using 'nix hash'
bazel_wrapper_hash=$(cat "${bazel_wrapper}"/* | sha1sum | cut -d' ' -f1)

hashed_out_link="${workspace_root}/.bazel-wrapper/${bazel_wrapper_hash}"

function nix_build
{
  nix \
    --option warn-dirty false \
    --extra-experimental-features 'nix-command flakes' \
    build \
    --verbose \
    "$@"
}

if [[ ! -e "$hashed_out_link" ]]; then
  rm -rf "${workspace_root}/.bazel-wrapper"
  store_path=$(
    nix_build \
      --out-link "$hashed_out_link" \
      --print-out-paths \
      "path:$bazel_wrapper"
  )
  echo "cached store path $store_path to $hashed_out_link"
fi

# NixOS doesn't have /bin/bash so we need to set --shell_executable
nixos_bazelrc_dir="${workspace_root}/.nixos-autoconfig"
if [[ ! -e /bin/bash && ! -e "${nixos_bazelrc_dir}/${bazel_wrapper_hash}" ]]; then
  echo "generating/updating nixos specific bazelrc"

  rm -rf "$nixos_bazelrc_dir"
  nix_build \
    --out-link "${nixos_bazelrc_dir}/${bazel_wrapper_hash}" \
    "path:${bazel_wrapper}#nixos-bazelrc"
  cat > ${nixos_bazelrc_dir}/bazelrc << EOF
import %workspace%/.nixos-autoconfig/${bazel_wrapper_hash}
EOF

fi

exec "$hashed_out_link/bin/bazel-wrapper" "$@"
